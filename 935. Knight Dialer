class Solution:

  def knightDialer(self, n: int) -> int:

    M = 1_000_000_007
    d = [(-2, 1), (-1, 2), (1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1)]
    l = [[1] * 3 for _ in range(4)]
    l[3][0] = l[3][2] = 0

    for _ in range(n - 1):

      temp = [[0] * 3 for _ in range(4)]

      for i in range(4):

        for j in range(3):

          if (i, j) in ((3, 0), (3, 2)):

            continue

          for x, y in d:

            x = i + x
            y = j + y

            if x < 0 or x >= 4 or y < 0 or y >= 3:

              continue

            if (x, y) in ((3, 0), (3, 2)):

              continue

            temp[x][y] = (temp[x][y] + l[i][j]) % M

      l = temp

    return sum(map(sum, l)) % M
