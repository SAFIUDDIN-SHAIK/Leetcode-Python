class Class:

  def __init__(self, n: int):

    self.id = list(range(n))
    self.r = [0] * n

  def unionByRank(self, a: int, b: int) -> None:

    i = self.find(a)
    j = self.find(b)

    if i == j:

      return

    if self.r[i] < self.r[j]:

      self.id[i] = j

    elif self.r[i] > self.r[j]:

      self.id[j] = i

    else:

      self.id[i] = j
      self.r[j] += 1

  def find(self, a: int) -> int:

    if self.id[a] != a:

      self.id[a] = self.find(self.id[a])

    return self.id[a]


class Solution:

  def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:

    l1 = []
    l2 = []

    for i in range(len(edges)):

      edges[i].append(i)

    edges.sort(key=lambda x: x[2])

    def f(n1: List[int], n2: int) -> Union[int, float]:

      res = 0
      l = Class(n)

      if n1:

        l.unionByRank(n1[0], n1[1])
        res += n1[2]

      for a, b, c, idx in edges:

        if idx == n2:

          continue

        if l.find(a) == l.find(b):

          continue

        l.unionByRank(a, b)
        res += c

      root = l.find(0)

      if any(l.find(i) != root for i in range(n)):

        return math.inf

      return res

    res = f([], -1)

    for i in edges:

      idx = i[3]

      if f([], idx) > res:

        l1.append(idx)

      elif f(i, -1) == res:

        l2.append(idx)

    return [l1, l2]
