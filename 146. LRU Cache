class Node:

  def __init__(self, k: int, v: int):

    self.k = k
    self.v = v
    self.p = None
    self.n = None


class LRUCache:

  def __init__(self, c: int):

    self.c = c
    self.d = {}
    self.root = Node(-1, -1)
    self.prev = Node(-1, -1)
    self.f(self.root, self.prev)

  def get(self, k: int) -> int:

    if k not in self.d:

      return -1

    obj = self.d[k]
    self.f3(obj)
    self.f2(obj)

    return obj.v

  def put(self, k: int, v: int) -> None:

    if k in self.d:

      obj = self.d[k]
      obj.v = v
      self.f3(obj)
      self.f2(obj)

      return

    if len(self.d) == self.c:

      prev = self.prev.p
      del self.d[prev.k]
      self.f3(prev)

    self.f2(Node(k, v))
    self.d[k] = self.root.n

  def f(self, obj1: Node, obj2: Node):

    obj1.n = obj2
    obj2.p = obj1

  def f2(self, obj: Node):

    self.f(obj, self.root.n)
    self.f(self.root, obj)

  def f3(self, obj: Node):

    self.f(obj.p, obj.n)
