class UnionFind:

  def __init__(self, n: int):

    self.r = list(range(n))
    self.l = [0] * n

  def unionByRank(self, a: int, b: int) -> None:

    i = self._find(a)
    j = self._find(b)

    if i == j:

      return

    if self.l[i] < self.l[j]:

      self.r[i] = j

    elif self.l[i] > self.l[j]:

      self.r[j] = i

    else:

      self.r[i] = j
      self.l[j] += 1

  def connected(self, a: int, b: int) -> bool:

    return self._find(self.r[a]) == self._find(self.r[b])

  def reset(self, a: int) -> None:

    self.r[a] = a

  def _find(self, a: int) -> int:

    if self.r[a] != a:

      self.r[a] = self._find(self.r[a])

    return self.r[a]

class Solution:

  def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:

    obj = UnionFind(n)
    d = collections.defaultdict(list)
    obj.unionByRank(0, firstPerson)

    for i, j, k in meetings:

      d[k].append((i, j))

    for _, pairs in sorted(d.items(), key=lambda i: i[0]):

      s = set()

      for i, j in pairs:

        obj.unionByRank(i, j)
        s.add(i)
        s.add(j)

      for person in s:

        if not obj.connected(person, 0):

          obj.reset(person)

    return [i for i in range(n) if obj.connected(i, 0)]
